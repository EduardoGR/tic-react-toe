{"version":3,"sources":["domain/game-result.js","logic/logic.js","domain/constants.js","reducers/tic-tac-toe.js","components/square.js","components/board.js","components/tic-tac-toe.js","actions/index.js","index.js"],"names":["GameResult","_ref","gameStatus","wonLine","wonSymbol","getResultFromBoard","board","winningLine","filter","_winningLine","Object","slicedToArray","a","b","c","undefined","length","pop","slice","BOARD_SIZE_THREE","square","isBoardFilled","initialState","history","Array","fill","stepNumber","turn","getNextSymbol","symbol","injectSheet","background","border","float","font-size","font-weight","line-height","height","margin-right","margin-top","padding","text-align","width","&:focus","outline","onClick","classes","react_default","createElement","className","Board","cellIndex","this","props","onClickBoard","key","bind","items","row","size","column","push","renderSquare","boardRow","React","Component","&:after","clear","content","display","connect","_ref2","position","type","onClickMovementHistory","game","font","margin","flex-direction","gameInfo","margin-left","status","margin-bottom","li","padding-left","ol","movementsHistory","map","step","move","desc","getMovementsHistory","components_board","getStatus","store","createStore","gameResult","currentState","arguments","action","objectSpread","concat","boardOfStepNumber","getSymbolFromStepNumber","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","tic_tac_toe","document","getElementById"],"mappings":"yMAOeA,EANI,SAAAC,GAAA,MAAuC,CACtDC,WADeD,EAAEC,WAEjBC,QAFeF,EAAcE,QAG7BC,UAHeH,EAAuBG,YCQ7BC,EAAqB,SAACC,GAC/B,IAWMC,EAXe,CACjB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGsBC,OAAO,SAAAD,GAAe,IAAAE,EAAAC,OAAAC,EAAA,EAAAD,CACjCH,EADiC,GAC5CK,EAD4CH,EAAA,GACzCI,EADyCJ,EAAA,GACtCK,EADsCL,EAAA,GAEnD,OAAOH,EAAMM,IAAMN,EAAMM,KAAON,EAAMO,IAAMP,EAAMM,KAAON,EAAMQ,KAG/DZ,OAAaa,EACbZ,OAAUY,EACVX,OAAYW,EAYhB,OAV2B,IAAvBR,EAAYS,QACZd,ECtBuB,MDuBvBC,EAAUI,EAAYU,MACtBb,EAAYE,EAAMH,EAAQe,QAAQD,QAIlCf,EAlCc,SAACI,GACnB,OAEca,IAFPb,EAAME,OAAO,SAAAY,GAChB,OAAiB,MAAVA,IACRJ,OA4BQK,CAAcf,GCvBG,OAJG,UDiCxBN,EAAW,CACdE,WAAYA,EACZC,QAASA,EACTC,UAAWA,KEvCbkB,EAAe,CACjBC,QAAS,CAAC,CACNjB,MAAOkB,MAAM,GAAGC,KAAK,QAEzBC,WAAY,EACZxB,WDJiC,YCKjCC,aAASY,EACTY,KDVoB,KCalBC,EAAgB,SAACC,GAAD,MDbE,MCawBA,EDXxB,IAFA,6DE+BTC,MA7BI,CACfV,OAAQ,CACJW,WAAc,OACdC,OAAU,iBACVC,MAAS,OACTC,YAAa,OACbC,cAAe,OACfC,cAAe,OACfC,OAAU,OACVC,eAAgB,OAChBC,aAAc,OACdC,QAAW,IACXC,aAAc,SACdC,MAAS,OACTC,UAAW,CACPC,QAAW,OACXb,WAAc,UAaXD,CARA,SAAA7B,GAAA,IAAE4C,EAAF5C,EAAE4C,QAAShB,EAAX5B,EAAW4B,OAAQF,EAAnB1B,EAAmB0B,KAAMmB,EAAzB7C,EAAyB6C,QAAzB,OACXC,EAAAnC,EAAAoC,cAAA,UACIC,UAAWH,EAAQ1B,OACnByB,QAAS,kBAAMA,EAAQlB,KAEtBE,KCfHqB,uLACWC,EAAWtB,GACe,MAA/BuB,KAAKC,MAAM/C,MAAM6C,SAA6CpC,IAAvBqC,KAAKC,MAAMlD,SAClDiD,KAAKC,MAAMC,aAAaH,EAAWtB,wCAI9BsB,GACT,IAAItB,EAASuB,KAAKC,MAAM/C,MAAM6C,GAC9B,OACIJ,EAAAnC,EAAAoC,cAAC5B,EAAD,CACImC,IAAKJ,EACLtB,OAAQA,EACRF,KAAMyB,KAAKC,MAAM1B,KACjBkB,QAASO,KAAKE,aAAaE,KAAKJ,KAAMD,sCAS9C,IAHA,IAEIA,EAFA7C,EAAQ,GACRmD,EAAQ,GAEHC,EAAM,EAAGA,EAAMN,KAAKC,MAAMM,OAAQD,EAAK,CAC5C,IAAK,IAAIE,EAAS,EAAGA,EAASR,KAAKC,MAAMM,OAAQC,EAC7CT,EAAYS,EAASF,EAAMN,KAAKC,MAAMM,KACtCF,EAAMI,KAAKT,KAAKU,aAAaX,IAEjC7C,EAAMuD,KAAKd,EAAAnC,EAAAoC,cAAA,OAAKO,IAAKG,EAAKT,UAAWG,KAAKC,MAAMP,QAAQiB,UAAWN,IACnEA,EAAQ,GAEZ,OAAOV,EAAAnC,EAAAoC,cAAA,WAAM1C,UA/BD0D,IAAMC,WAmCXnC,MA7CI,CACfiC,SAAU,CACNG,UAAW,CACPC,MAAS,OACTC,QAAW,GACXC,QAAW,WAwCRvC,CAAwBoB,GCqCxBoB,cACX,SAAAC,GAAA,MAAuD,CAAChD,QAAxDgD,EAAEhD,QAA+DG,WAAjE6C,EAAW7C,WAAkExB,WAA7EqE,EAAuBrE,WAAkEC,QAAzFoE,EAAmCpE,QAA+DwB,KAAlG4C,EAA4C5C,OAC5C,CACI2B,aCpFiB,SAACkB,EAAU3C,GAAX,MAAuB,CAC5C4C,KAHkC,aAIlCD,WACA3C,WDkFI6C,uBC/EkB,SAAAhD,GAAU,MAAK,CACrC+C,KAXoC,eAYpC/C,gBDyEW4C,CAMbxC,IArFiB,CACf6C,KAAM,CACFC,KAAQ,4CACRC,OAAU,OACVR,QAAW,OACXS,iBAAkB,OAEtBC,SAAU,CACNC,cAAe,QAEnBC,OAAQ,CACJC,gBAAiB,QAErBC,GAAI,CACAC,eAAgB,QAEpBC,GAAI,CACAD,eAAgB,SAoEtBtD,CApCgB,SAAA7B,GASZ,IARFsB,EAQEtB,EARFsB,QACAG,EAOEzB,EAPFyB,WACAxB,EAMED,EANFC,WACAC,EAKEF,EALFE,QACAwB,EAIE1B,EAJF0B,KACA2B,EAGErD,EAHFqD,aACAoB,EAEEzE,EAFFyE,uBACA5B,EACE7C,EADF6C,QAEMwC,EAvBkB,SAAC/D,EAASmD,EAAwB5B,GAC1D,OAAOvB,EAAQgE,IAAI,SAACC,EAAMC,GACtB,IAAMC,EAAOD,EACb,eAAiBA,EACjB,mBACA,OACI1C,EAAAnC,EAAAoC,cAAA,MAAIO,IAAKkC,EAAMxC,UAAWH,EAAQqC,IAC9BpC,EAAAnC,EAAAoC,cAAA,UAAQH,QAAS,kBAAM6B,EAAuBe,KAAQC,MAgBzCC,CAAoBpE,EAASmD,EAAwB5B,GAC9E,OACIC,EAAAnC,EAAAoC,cAAA,OAAKC,UAAWH,EAAQ6B,MACpB5B,EAAAnC,EAAAoC,cAAA,WACID,EAAAnC,EAAAoC,cAAC4C,EAAD,CACIjC,KJ1DY,EI2DZrD,MAAOiB,EAAQG,GAAYpB,MAC3BqB,KAAMA,EACNxB,QAASA,EACTmD,aAAc,SAACkB,EAAU3C,GAAX,OAAsByB,EAAakB,EAAU3C,OAGnEkB,EAAAnC,EAAAoC,cAAA,OAAKC,UAAWH,EAAQiC,UACpBhC,EAAAnC,EAAAoC,cAAA,OAAKC,UAAWH,EAAQmC,QAnDtB,SAAC/E,EAAYyB,GAC3B,OAAOzB,GACH,IJzB6B,YI2B7B,IJzB2B,UI0BvB,MAAO,gBAAkByB,EAC7B,IJzBuB,MI0BnB,MAAO,WAAaA,EACxB,IJzBwB,OI0BpB,MAAO,QACX,QACI,MAAO,yBAwC8BkE,CAAU3F,EAAYyB,IACvDoB,EAAAnC,EAAAoC,cAAA,MAAIC,UAAWH,EAAQuC,IAAKC,QEzEtCQ,EAAQC,YLWmB,WAA8C,IACvEC,EACAzE,EAF0B0E,EAA6CC,UAAAlF,OAAA,QAAAD,IAAAmF,UAAA,GAAAA,UAAA,GAA9B5E,EAAc6E,EAAgBD,UAAAlF,OAAA,QAAAD,IAAAmF,UAAA,GAAAA,UAAA,GAAP,GAIpE,OAAQC,EAAO1B,MACX,IIpB8B,aJoB9B,IACWD,EAAoB2B,EAApB3B,SAAU3C,EAAUsE,EAAVtE,OAIbvB,GAFJiB,EAAU0E,EAAa1E,QAAQL,MAAM,EAAG+E,EAAavE,WAAa,IAC1CH,EAAQP,OAAS,GACrBV,MAAMY,QAM1B,OAJAZ,EAAMkE,GAAY3C,EAElBmE,EAAa3F,EAAmBC,GAEzBI,OAAA0F,EAAA,EAAA1F,CAAA,GACAuF,EADP,CAEI1E,QAASA,EAAQ8E,OAAO,CAAC,CACrB/F,MAAOA,KAEXoB,WAAYH,EAAQP,OACpBd,WAAY8F,EAAW9F,WACvBC,QAAS6F,EAAW7F,QACpBwB,KDnCmB,YCmCWqE,EAAW9F,WAAa0B,EAAcC,GAAUA,IAEtF,II3CgC,eJ2ChC,IACWH,EAAcyE,EAAdzE,WAGD4E,GADN/E,EAAU0E,EAAa1E,QAAQL,MAAM,EAAGQ,EAAa,IACnBA,GAAYpB,MAAMY,QAEhDhB,GADJ8F,EAAa3F,EAAmBiG,IACJpG,WACxByB,EAnCgB,SAACD,GAAD,OAAiBA,EAAa,IAAO,EDf7C,IAEA,ICgDD6E,CAAwB7E,GAQnC,OANIA,IAAeuE,EAAa1E,QAAQP,OAAS,EAC7CW,EAAOsE,EAAatE,KACE,IAAfD,IACPxB,EDnDqB,aCsDlBQ,OAAA0F,EAAA,EAAA1F,CAAA,GACAuF,EADP,CAEIvE,WAAYA,EACZxB,WAAYA,EACZC,QAAS6F,EAAW7F,QACpBwB,KAAMA,IAEd,QACI,OAAOsE,IK1DfO,OAAOC,8BAAgCD,OAAOC,gCAGlDC,IAASC,OACL5D,EAAAnC,EAAAoC,cAAC4D,EAAA,EAAD,CAAUd,MAAOA,GACb/C,EAAAnC,EAAAoC,cAAC6D,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.475116ba.chunk.js","sourcesContent":["\nconst GameResult = ({gameStatus, wonLine, wonSymbol}) => ({\n    gameStatus: gameStatus,\n    wonLine: wonLine,\n    wonSymbol: wonSymbol,\n});\n\nexport default GameResult;","import {BOARD_SIZE_THREE, GAME_STATUS_DRAW, GAME_STATUS_WIN, GAME_STATUS_ONGOING} from '../domain/constants'\nimport GameResult from '../domain/game-result'\n\nconst isBoardFilled = (board) => {\n    return board.filter(square => {\n        return square != null\n    }).length === BOARD_SIZE_THREE * BOARD_SIZE_THREE;\n}\n\nexport const getResultFromBoard = (board) => {\n    const winningLines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    const winningLine = winningLines.filter(winningLine => {\n        const [a, b, c] = winningLine;\n        return board[a] && board[a] === board[b] && board[a] === board[c];\n    });\n\n    let gameStatus = undefined;\n    let wonLine = undefined;\n    let wonSymbol = undefined;\n    \n    if (winningLine.length !== 0) {\n        gameStatus = GAME_STATUS_WIN;\n        wonLine = winningLine.pop();\n        wonSymbol = board[wonLine.slice().pop()]\n    } else if (isBoardFilled(board)) {\n        gameStatus = GAME_STATUS_DRAW;\n    } else {\n        gameStatus = GAME_STATUS_ONGOING;\n    }\n\n    return GameResult({\n        gameStatus: gameStatus,\n        wonLine: wonLine,\n        wonSymbol: wonSymbol,\n    });\n};","\nexport const PLAYER_X = 'X';\n\nexport const PLAYER_O = 'O';\n\nexport const GAME_STATUS_BEGINNING = 'Beggining';\n\nexport const GAME_STATUS_ONGOING = 'Ongoing';\n\nexport const GAME_STATUS_WIN = 'Win';\n\nexport const GAME_STATUS_DRAW = 'Draw';\n\nexport const BOARD_SIZE_THREE = 3;","import {ACTION_TYPE_ADD_SYMBOL, ACTION_TYPE_JUMP_TO_MOVE} from '../actions/index'\nimport {PLAYER_O, PLAYER_X, GAME_STATUS_BEGINNING, GAME_STATUS_ONGOING} from '../domain/constants'\nimport {getResultFromBoard} from '../logic/logic'\n\nconst initialState = {\n    history: [{\n        board: Array(9).fill(null),\n    }],\n    stepNumber: 0,\n    gameStatus: GAME_STATUS_BEGINNING,\n    wonLine: undefined,\n    turn: PLAYER_X\n};\n\nconst getNextSymbol = (symbol) =>  PLAYER_X === symbol ? PLAYER_O : PLAYER_X;\n\nconst getSymbolFromStepNumber = (stepNumber) => (stepNumber % 2) === 0 ? PLAYER_X : PLAYER_O;\n\nexport const ticTactToeReducer = (currentState = initialState, action = {}) => {\n    let gameResult;\n    let history;\n\n    switch (action.type) {\n        case ACTION_TYPE_ADD_SYMBOL:\n            const {position, symbol} = action;\n\n            history = currentState.history.slice(0, currentState.stepNumber + 1);\n            const current = history[history.length - 1];\n            let board = current.board.slice();\n            \n            board[position] = symbol;\n\n            gameResult = getResultFromBoard(board);\n\n            return {\n                ...currentState,\n                history: history.concat([{\n                    board: board,\n                }]),\n                stepNumber: history.length,\n                gameStatus: gameResult.gameStatus,\n                wonLine: gameResult.wonLine,\n                turn: GAME_STATUS_ONGOING === gameResult.gameStatus ? getNextSymbol(symbol) : symbol\n            };\n        case ACTION_TYPE_JUMP_TO_MOVE:\n            const {stepNumber} = action;\n\n            history = currentState.history.slice(0, stepNumber + 1);\n            const boardOfStepNumber = history[stepNumber].board.slice();\n            gameResult = getResultFromBoard(boardOfStepNumber);\n            let gameStatus = gameResult.gameStatus;\n            let turn = getSymbolFromStepNumber(stepNumber);\n\n            if (stepNumber === currentState.history.length - 1) {\n                turn = currentState.turn;\n            } else if (stepNumber === 0) {\n                gameStatus = GAME_STATUS_BEGINNING\n            }\n\n            return {\n                ...currentState,\n                stepNumber: stepNumber,\n                gameStatus: gameStatus,\n                wonLine: gameResult.wonLine,\n                turn: turn\n            };\n        default:\n            return currentState\n    }\n}\n","import React from 'react';\nimport injectSheet from 'react-jss'\n\nconst stylesheet = {\n    square: {\n        'background': '#fff',\n        'border': '1px solid #999',\n        'float': 'left',\n        'font-size': '24px',\n        'font-weight': 'bold',\n        'line-height': '34px',\n        'height': '34px',\n        'margin-right': '-1px',\n        'margin-top': '-1px',\n        'padding': '0',\n        'text-align': 'center',\n        'width': '34px',\n        '&:focus': {\n            'outline': 'none',\n            'background': '#ddd',\n        },\n    },\n}\n\nconst Square = ({onClick, symbol, turn, classes}) =>\n    <button \n        className={classes.square}\n        onClick={() => onClick(turn)}\n    >\n        {symbol}\n    </button>;\n\nexport default injectSheet(stylesheet)(Square)","import React from 'react';\nimport injectSheet from 'react-jss'\nimport Square from './square'\n\nconst stylesheet = {\n    boardRow: {\n        '&:after': {\n            'clear': 'both',\n            'content': '',\n            'display': 'table',\n        },\n    },\n}\n\nclass Board extends React.Component {\n    onClickBoard(cellIndex, symbol) {\n        if (this.props.board[cellIndex] == null && this.props.wonLine === undefined) {\n            this.props.onClickBoard(cellIndex, symbol);\n        }\n    }\n\n    renderSquare(cellIndex) {\n        let symbol = this.props.board[cellIndex];\n        return (\n            <Square\n                key={cellIndex}\n                symbol={symbol}\n                turn={this.props.turn}\n                onClick={this.onClickBoard.bind(this, cellIndex)}\n            />\n        );\n    }\n\n    render() {\n        let board = [];\n        let items = [];\n        let cellIndex;\n        for (let row = 0; row < this.props.size; ++row) {\n            for (let column = 0; column < this.props.size; ++column) {\n                cellIndex = column + row * this.props.size;\n                items.push(this.renderSquare(cellIndex));\n            }\n            board.push(<div key={row} className={this.props.classes.boardRow}>{items}</div>)\n            items = []\n        }\n        return <div>{board}</div>;\n    }\n}\n\nexport default injectSheet(stylesheet)(Board)\n","import React from 'react';\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux';\nimport {BOARD_SIZE_THREE, GAME_STATUS_DRAW, GAME_STATUS_WIN, GAME_STATUS_ONGOING, GAME_STATUS_BEGINNING} from '../domain/constants'\nimport Board from '../components/board'\nimport {addSymbol, jumpToMove} from '../actions/index'\n\nconst stylesheet = {\n    game: {\n        'font': '14px \"Century Gothic\", Futura, sans-serif',\n        'margin': '20px',\n        'display': 'flex',\n        'flex-direction': 'row',\n    },\n    gameInfo: {\n        'margin-left': '20px',\n    },\n    status: {\n        'margin-bottom': '10px',\n    },\n    li: {\n        'padding-left': '30px',\n    },\n    ol: {\n        'padding-left': '30px',\n    }\n}\n\nconst getStatus = (gameStatus, turn) => {\n    switch(gameStatus) {\n        case GAME_STATUS_BEGINNING:\n            return 'Next player: ' + turn;\n        case GAME_STATUS_ONGOING:\n            return 'Next player: ' + turn;\n        case GAME_STATUS_WIN:\n            return 'Winner: ' + turn;\n        case GAME_STATUS_DRAW:\n            return 'Draw!';\n        default:\n            return 'Somethign went wrong!';\n    }\n};\n\nconst getMovementsHistory = (history, onClickMovementHistory, classes) => {\n    return history.map((step, move) => {\n        const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n        return (\n            <li key={move} className={classes.li}>\n                <button onClick={() => onClickMovementHistory(move)}>{desc}</button>\n            </li>\n        );\n    });\n};\n\nconst TicTacToe = ({\n    history, \n    stepNumber, \n    gameStatus,\n    wonLine,\n    turn,\n    onClickBoard,\n    onClickMovementHistory,\n    classes,\n}) => {\n    const movementsHistory = getMovementsHistory(history, onClickMovementHistory, classes);\n    return (\n        <div className={classes.game}>\n            <div>\n                <Board\n                    size={BOARD_SIZE_THREE}\n                    board={history[stepNumber].board}\n                    turn={turn}\n                    wonLine={wonLine}\n                    onClickBoard={(position, symbol) => onClickBoard(position, symbol)}\n                />\n            </div>\n            <div className={classes.gameInfo}>\n                <div className={classes.status}>{getStatus(gameStatus, turn)}</div>\n                <ol className={classes.ol}>{movementsHistory}</ol>\n            </div>\n        </div>\n    );\n};\n\nexport default connect(\n    ({history, stepNumber, gameStatus, wonLine, turn}) => ({history, stepNumber, gameStatus, wonLine, turn}),\n    {\n        onClickBoard: addSymbol,\n        onClickMovementHistory: jumpToMove,\n    }\n)(injectSheet(stylesheet)(TicTacToe));\n","\nexport const ACTION_TYPE_JUMP_TO_MOVE = 'JUMP_TO_MOVE';\n\nexport const ACTION_TYPE_ADD_SYMBOL = 'ADD_SYMBOL';\n\nexport const addSymbol = (position, symbol) => ({\n    type: ACTION_TYPE_ADD_SYMBOL,\n    position,\n    symbol\n});\n\nexport const jumpToMove = stepNumber => ({\n    type: ACTION_TYPE_JUMP_TO_MOVE,\n    stepNumber,\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport { ticTactToeReducer} from './reducers/tic-tac-toe';\nimport TicTacToe from './components/tic-tac-toe'\n\nconst store = createStore(\n    ticTactToeReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <TicTacToe />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}